/*
 * This Groovy source file was generated by the Gradle 'init' task.
 */
package app


import groovy.transform.CompileStatic
import groovy.util.logging.Slf4j
import org.pf4j.DefaultPluginManager
import org.pf4j.ManifestPluginDescriptorFinder
import org.pf4j.PluginDescriptorFinder
import org.pf4j.PluginManager
import org.pf4j.update.PluginInfo
import org.pf4j.update.UpdateManager
import plug.test.Greeting

@Slf4j
@CompileStatic
class App implements Closeable {

    PluginManager pluginManager
    UpdateManager updateManager

    App() {
        println "+++ ${System.getProperty('pf4j.pluginsDir')}"
// enable DEV mode
//        System.setProperty('pf4j.pluginsDir', new File('/Users/pditommaso/Projects/plug-and-pray/plugins').canonicalPath)
//        System.setProperty('pf4j.mode', 'dev')

        // look only for plugin manifest file
        pluginManager = new DefaultPluginManager() {
            @Override
            protected PluginDescriptorFinder createPluginDescriptorFinder() {
                return new ManifestPluginDescriptorFinder()
            }
        }

        pluginManager.loadPlugins(  )

//        updateManager = new UpdateManager(pluginManager, Paths.get('repositories.json'))
//        checkUpdates()
//        checkAvail()

        pluginManager.startPlugins()
    }

    void checkAvail() {
        // check for available (new) plugins
        if (!updateManager.hasAvailablePlugins()) {
            log.debug("** No available plugins found");
            return
        }

        List<PluginInfo> availablePlugins = updateManager.getAvailablePlugins();
        log.debug("Found ${availablePlugins.size()} available plugins")
        for (PluginInfo plugin : availablePlugins) {
            log.debug("Found available plugin '${plugin.id}'")
            PluginInfo.PluginRelease lastRelease = updateManager.getLastPluginRelease(plugin.id)
            String lastVersion = lastRelease.version
            log.debug("Install plugin '$plugin.id' with version $lastVersion")
            boolean installed = updateManager.installPlugin(plugin.id, lastVersion)
            if (installed) {
                log.debug("Installed plugin '$plugin.id'")
            } else {
                log.error("Cannot install plugin '$plugin.id'")
            }
        }
    }

    void checkUpdates() {
        if (!updateManager.hasUpdates()) {
            log.debug("** No updates found")
            return
        }

        List<PluginInfo> updates = updateManager.getUpdates();
        log.debug("Found ${updates.size()} updates");
        for (PluginInfo plugin : updates) {
            log.debug("Found update for plugin '$plugin.id'");
            PluginInfo.PluginRelease lastRelease = updateManager.getLastPluginRelease(plugin.id);
            String lastVersion = lastRelease.version;
            String installedVersion = pluginManager.getPlugin(plugin.id).getDescriptor().getVersion();
            log.debug("Update plugin '$plugin.id' from version $installedVersion to version $lastVersion");
            boolean updated = updateManager.updatePlugin(plugin.id, lastVersion);
            if (updated) {
                log.debug("Updated plugin '$plugin.id'")
            } else {
                log.error("Cannot update plugin '$plugin.id'")
            }
        }
    }

    void run() {
        // lookup and invoke extensions
        List<Greeting> greetings = pluginManager.getExtensions(Greeting.class);
        for (Greeting greeting : greetings) {
            System.out.println(">>> " + greeting.getGreeting());
        }
    }

    @Override
    void close() throws IOException {
        pluginManager.stopPlugins()
    }

    static void main(String[] args) {
        def app = new App()
        try {
            app.run()
        }
        finally {
            app.close()
        }
    }
}
